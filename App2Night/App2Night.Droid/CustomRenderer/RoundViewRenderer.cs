using Android.Graphics;
using App2Night.CustomView;
using App2Night.Droid.CustomRenderer;
using Xamarin.Forms;
using Xamarin.Forms.Platform.Android;

[assembly: ExportRenderer(typeof(RoundView), typeof(RoundViewRenderer))]
namespace App2Night.Droid.CustomRenderer
{
    public class RoundViewRenderer : ViewRenderer<RoundView, ViewRenderer>
    {  
        public override void Draw(Canvas canvas)
        { 
            var rect = new Rect();
             
            GetDrawingRect(rect);  
            Path path = new Path();

            if (Element.FlatBottom)
            {
                //Points were generated by Inkscape
                path.MoveTo(GetCorrectX(130.148150), GetCorrectY(945));
                FixedCubicTo(path, 57.098614, 841.030040, 0, 698.921590, 0, 554.575240);
                FixedCubicTo(path, 0, 219.793510, 238.396740, -51.600685, 528.728170, -51.600707);
                FixedCubicTo(path, 819.059620, -51.600707, 1054.419800, 219.793510, 1054.419800, 554.575240);
                FixedCubicTo(path, 1054.419800, 712.181670, 1022.872800, 836.647530, 937.369210, 945);
            }
            else
            {
                path.AddRoundRect(rect.Left, rect.Top, rect.Right, rect.Bottom, rect.Width()/2, rect.Height()/2, Path.Direction.Ccw);
            }
            canvas.ClipPath(path);
            base.Draw(canvas);

            if (Element.Edge)
            {
                Paint paint = new Paint(PaintFlags.AntiAlias);
                paint.SetStyle(Paint.Style.Stroke);
                paint.Color = Element.EdgeColor.ToAndroid();
                paint.StrokeWidth = DpToPixel( Element.EdgeSize); 
                canvas.DrawPath(path, paint);
            }
        }

        float DpToPixel(double dp)
        {
            return (float) (dp*Resources.DisplayMetrics.Density);
        }

        /// <summary>
        /// Normalizes all vector points to the width and height of the view.
        /// Vector points were generated with inkscape.
        /// </summary> 
        void FixedCubicTo(Path path, double x1, double y1, double x2, double y2, double x3, double y3)
        {  
            path.CubicTo(GetCorrectX(x1),GetCorrectY(y1), GetCorrectX(x2), GetCorrectY(y2), GetCorrectX(x3), GetCorrectY(y3)); 
        }

        /// <summary>
        /// Normalizes the x vector points to the width of the view.
        /// </summary> 
        float GetCorrectX(double x)
        {
            var xMulti = 1054.419800;
            return (float) (Width*(x/xMulti));
        }

        /// <summary>
        /// Normalizes the y vector points to the height of the view.
        /// </summary> 
        float GetCorrectY(double y)
        {
            var yOffset = 52;
            var yMulti = 945 + yOffset;
            return (float)(Height * ((y+yOffset) / yMulti));
        }
    }
}